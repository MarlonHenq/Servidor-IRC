#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

# Delete debug.log
file = open('debug.log', 'w')
file.write('')
file.close()

messages = [b'']
users = {}  # Mapeia apelidos para conexões
channels = {}  # Mapeia canais para listas de conexões
userChannels = {}  # Mapeia usuários para canais

def debuger(msg):
    file = open('debug.log', 'a')
    file.write(msg + '\n')
    file.close()

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')

    # Obter o apelido do usuário
    user_nick = next((n for n, conn in users.items() if conn == conexao), None)

    if user_nick:
        # Enviar mensagem QUIT para todos os usuários em canais comuns
        if conexao in userChannels:
            for channel in userChannels[conexao]:
                if channel in channels:
                    quit_message = b':%s QUIT\r\n' % user_nick
                    debuger('dados_enviados: ' + str(quit_message))
                    for user in channels[channel]:
                        if user != conexao:
                            user.enviar(quit_message)
                            

        # Remover o usuário do dicionário users
        del users[user_nick.lower()]

    # Remover o usuário de todos os canais
    if conexao in userChannels:
        for channel in userChannels[conexao]:
            if channel in channels:
                channels[channel].remove(conexao)
                # Se o canal estiver vazio, removê-lo
                if not channels[channel]:
                    del channels[channel]
        # Remover o mapeamento do usuário para canais
        del userChannels[conexao]

    # Fechar a conexão
    conexao.fechar()



def dados_recebidos(conexao, dados):
    try:
        debuger('dados_recebidos: ' + str(dados))
        
        global messages
        global users
        global channels
        global userChannels

        debuger('users: ' + str(users))
        debuger('channels: ' + str(channels))
        debuger('userChannels: ' + str(userChannels))

        if messages[-1] != b'' and b'\r\n' not in messages[-1]:
            messages[-1] += dados
            messages = messages[-1].split(b'\r\n')
        else:
            messages = dados.split(b'\r\n')

        if dados == b'':
            return sair(conexao)

        for i in range(0, len(messages)-1):
            debuger('mensagem: ' + str(messages[i]))

            if b'ping' in messages[i].lower():
                content = b":server PONG server :%s\r\n" % messages[i].split(b' ', 1)[1]
                conexao.enviar(content)
                debuger('dados_enviados: ' + str(content))

            # NiCK
            elif b'nick' in messages[i].lower():
                # Extrair o novo apelido da mensagem
                nick = messages[i].split(b' ', 1)[1].strip()

                # Verificar se o apelido é válido
                if validar_nome(nick):
                    lower_nick = nick.lower()
                    
                    # Obter o apelido atual associado à conexão, se houver
                    current_nick = next((n for n, conn in users.items() if conn == conexao), None)
                    
                    # Verificar se o apelido já está em uso
                    if lower_nick in users:
                        # Enviar mensagem de erro se o apelido já estiver em uso
                        content = b":server 433 %s %s :Nickname is already in use\r\n" % (current_nick if current_nick else b'*', nick)
                        conexao.enviar(content)
                        debuger('dados_enviados: ' + str(content))
                    else:
                        if current_nick:
                            # Remover o apelido antigo, se existir
                            del users[current_nick.lower()]
                        
                        # Atualizar o apelido da conexão
                        users[lower_nick] = conexao
                        
                        # Enviar mensagens apropriadas
                        if current_nick:
                            # Enviar mensagem de mudança de apelido
                            content = b":%s NICK %s\r\n" % (current_nick, nick)
                            conexao.enviar(content)
                            debuger('dados_enviados: ' + str(content))
                        else:
                            # Enviar mensagem de boas-vindas se for a primeira conexão
                            content = b":server 001 %s :Welcome\r\n" % nick
                            content1 = b":server 422 %s :MOTD File is missing\r\n" % nick
                            conexao.enviar(content)
                            conexao.enviar(content1)
                            debuger('dados_enviados: ' + str(content))
                            debuger('dados_enviados: ' + str(content1))
                else:
                    # Enviar mensagem de erro se o apelido for inválido
                    content = b":server 432 * %s :Erroneous nickname\r\n" % nick
                    conexao.enviar(content)
                    debuger('dados_enviados: ' + str(content))

            # PRIVMSG
            elif b'privmsg' in messages[i].lower():
                # Extrair o apelido de origem, destino e conteúdo da mensagem
                user_send = next((n for n, conn in users.items() if conn == conexao), None)
                if user_send is None:
                    # Se o usuário não tiver um apelido definido, não pode enviar mensagens
                    content = b":server 401 * :No nickname defined\r\n"
                    conexao.enviar(content)
                    debuger('dados_enviados: ' + str(content))
                    continue
                
                # Extrair destino e mensagem
                partes = messages[i].split(b' ', 2)
                if len(partes) < 3:
                    # Se o formato da mensagem estiver incorreto
                    content = b":server 412 %s :No text to send\r\n" % user_send
                    conexao.enviar(content)
                    debuger('dados_enviados: ' + str(content))
                    continue
                
                user_receive = partes[1].strip().lower()
                message = partes[2].strip()
                
                # user_send = users[str(conexao)]
                debuger('user_send: ' + str(user_send))
                debuger('user_receive: ' + str(user_receive))
                debuger('message_priv: ' + str(message))

                if user_receive.startswith(b'#'):
                    # Lógica para canais
                    if user_receive in channels:
                        debuger('aaa')
                        #Verificar 
                        resposta = b':%s PRIVMSG %s %s\r\n' % (user_send, user_receive, message)
                        debuger('bbbbb')
                        for user in channels[user_receive]:
                            if user != conexao:
                                user.enviar(resposta)
                                debuger('dados_enviados: ' + str(resposta))
                else:
                    # Mensagem direta para outro usuário
                    if user_receive in users:
                        resposta = b':%s PRIVMSG %s %s\r\n' % (user_send, user_receive, message)
                        users[user_receive].enviar(resposta)
                        debuger('dados_enviados: ' + str(resposta))

            # JOIN
            elif b'join' in messages[i].lower():
                channel = messages[i].split(b' ')[-1].strip()

                if channel.startswith(b'#') and validar_nome(channel[1:]):
                    lower_channel = channel.lower()
                    if lower_channel not in channels:
                        channels[lower_channel] = []
                    
                    user_nick = next((n for n, conn in users.items() if conn == conexao), None)
                    if user_nick:
                        if conexao not in channels[lower_channel]:
                            channels[lower_channel].append(conexao)

                        if conexao not in userChannels:
                            userChannels[conexao] = []
                        userChannels[conexao].append(lower_channel)

                        resposta = b':%s JOIN :%s\r\n' % (user_nick, channel)
                        for user in channels[lower_channel]:
                            user.enviar(resposta)
                            debuger('dados_enviados: ' + str(resposta))

                        participants = [n for n, conn in users.items() if conn in channels[lower_channel]]
                        participants.sort()
                        base = b':server 353 %s = %s :' % (user_nick, channel)
                        resposta = base

                        for participant in participants:
                            if len(resposta) + len(participant) < 510:
                                resposta += participant + b' '
                            else:
                                conexao.enviar(resposta + b'\r\n')
                                resposta = base + participant + b' '
                        
                        if resposta != base:
                            conexao.enviar(resposta + b'\r\n')
                        
                        conexao.enviar(b':server 366 %s %s :End of /NAMES list.\r\n' % (user_nick, channel))
                        debuger('dados_enviados: End of /NAMES list for ' + str(channel))

                    else:
                        conexao.enviar(b':server 401 * :No nickname defined\r\n')
                        debuger('dados_enviados: No nickname defined')

                else:
                    conexao.enviar(b':server 403 %s :No such channel\r\n' % channel)
                    debuger('dados_enviados: No such channel - ' + str(channel))

            # PART
            elif b'part' in messages[i].lower():
                partes = messages[i].split(b' ')
                channel = partes[1].strip().lower() if len(partes) > 1 else None

                # Verifica se o canal foi fornecido e começa com '#'
                if channel and channel.startswith(b'#'):
                    user_nick = next((n for n, conn in users.items() if conn == conexao), None)
                    
                    # Remove o usuário do canal
                    if user_nick and channel in channels and conexao in channels[channel]:
                        
                        channels[channel].remove(conexao)
                        if not channels[channel]:
                            del channels[channel]

                        if conexao in userChannels:
                            userChannels[conexao].remove(channel)
                            if not userChannels[conexao]:
                                del userChannels[conexao]
                        resposta = b':%s PART %s\r\n' % (user_nick, channel)
                        for user in channels.get(channel, []):
                            user.enviar(resposta)
                        conexao.enviar(resposta)
                        debuger('dados_enviados: ' + str(resposta))

                    else:
                        # Nem precisa de resposta se o usuário não estiver no canal
                        resposta = b':server 442 %s %s :You are not on that channel\r\n' % (user_nick, channel)
                        conexao.enviar(resposta)
                        debuger('dados_enviados: ' + str(resposta))
                else:
                    # erro n utilizado tb
                    user_nick = next((n for n, conn in users.items() if conn == conexao), None)
                    resposta = b':server 403 %s :No such channel\r\n' % (user_nick if user_nick else b'*')
                    conexao.enviar(resposta)
                    debuger('dados_enviados: ' + str(resposta))



    except Exception as e:
        debuger('Erro: ' + str(e))
        sair(conexao)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    debuger('conexao_aceita: ' + str(conexao))
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
