#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

messages = [b'']
users = {}

def debuger(msg):
    file = open('debug.txt', 'a')
    file.write(msg + '\n')
    file.close()


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    debuger('dados_recebidos: ' + str(dados))

    global messages
    global users

    if messages[-1] != b'' and b'\r\n' not in messages[-1]:
        # Se o último elemento não estiver vazio e não contiver '\r\n'
        # Concatena os dados ao último pacote
        messages[-1] += dados
        # Divide novamente os dados com base em '\r\n' para separar em pacotes individuais
        messages = messages[-1].split(b'\r\n')
    else:
        # Se o último pacote estiver completo ou vazio
        # Divide os dados em pacotes separados por '\r\n'
        messages = dados.split(b'\r\n')

    if dados == b'':
        return sair(conexao)

    for i in range(0, len(messages)-1):
        debuger('mensagem: ' + str(messages[i]))

        if b'ping' in messages[i].lower():
            content = b":server PONG server :%s\r\n" % messages[i].split(b' ', 1)[1]
            conexao.enviar(content)
            debuger('dados_enviados: ' + str(content))

        elif b'nick' in messages[i].lower():
            nick = messages[i].split(b' ', 1)[1]
            
            if validar_nome(nick):
                if nick not in users:
                    users[nick] = conexao
                    content = b":server 001 %s :Welcome\r\n" % (nick)
                    content1 = b":server 422 %s :MOTD File is missing\r\n" % (nick)
                    conexao.enviar(content)
                    conexao.enviar(content1)
                    debuger('dados_enviados: ' + str(content))
                    debuger('dados_enviados: ' + str(content1))
                else:
                    content = b":server 433 %s %s :Nickname is already in use\r\n" % (nick, nick)
                    conexao.enviar(content)
                    debuger('dados_enviados: ' + str(content))

            else:
                content = b":server 432 * %s :Erroneous nickname\r\n" % (nick)
                conexao.enviar(content)
                debuger('dados_enviados: ' + str(content))



def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    debuger('conexao_aceita: ' + str(conexao))
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
